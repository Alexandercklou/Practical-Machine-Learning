NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x, "K"=3,"M"=7,"B"=10," "=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x,"K"=3,"m"=7,"M"=7,"B"=10,""""=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x,"K"=3,"m"=7,"M"=7,"B"=10,is.na(NewDataSet$PROPDMGEXP)=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x,"K"=3,"m"=7,"M"=7,"B"=10,''=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x,"K"=3,"m"=7,"M"=7,"B"=10,''=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x,"K"=3,"m"=7,"M"=7,"B"=10,' '=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
unique(NewDataSet$PROPDMGEXP)
NewDataSet<-DataSet[,ColList]
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<-as.character(NewDataSet$PROPDMGEXP)
NewDataSet<-DataSet[,ColList]
unique(NewDataSet$PROPDMGEXP)
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<-as.character(NewDataSet$PROPDMGEXP)
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<- lapply(NewDataSet$PROPDMGEXP, function(x){switch(x,"K"=3,"m"=7,"M"=7,"B"=10,NULL=0,"+"=0,"?"=0,"h"=3,"H"=3,"-"=0,x)})
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP[NewDataSet$PROPDMGEXP=='']<-0
unique(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<-as.numerice(NewDataSet$PROPDMGEXP)
NewDataSet$PROPDMGEXP<-as.numeric(NewDataSet$PROPDMGEXP)
unique(NewDataSet$PROPDMGEXP)
help(mtcars)
unique(mtcars$am)
unique(mtcars$cyl)
cor(mtcars$MPG~.)
cor(mtcars$MPG~)
cor(as.matrix(mtcars[,mpg]), as.matrix(mtcars[,-mpg]))
cor(as.matrix(mtcars[,1]), as.matrix(mtcars[,-1]))
unique(mtcars$cyl)
```
cor(mtcars[,1],mtcars[,-1])
```{r, echo=TRUE}
bptest
?bptest
install.packages("lmtest")
library(lmtest)
library(car)
isntall.packages(car)
isntall.packages("car")
install.packages("car")
library(car)
library(car)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("quantreg")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(quantreg)
?help(mtcars)
DataSet<-mtcars
DataSet$cyl<-as.factor(DataSet$cyl)
DataSet$vs<-as.factor(DataSet$vs)
DataSet$gear<-as.factor(DataSet$gear)
DataSet$carb<-as.factor(DataSet$carb)
DataSet$am<-as.factor(DataSet$am)
Model1<-lm(mpg~am,data=DataSet)
Model1$model
Model1$assign
Model1$coefficients
Model1$effects
Model1$rank
Model1$terms
Model1$effects
Model1$fitted.values
Model1$qr
str(Model1)
Model1$xlevels
Model1$terms
Model1$coefficients
summary(Model1)$adj.r.squared
K<-cor(mtcars[,1],mtcars[,-1])
K
names(K)
str(K)
dim(K)
attr(K)
K$dimnames
summary(cor(mtcars[,1],mtcars[,-1]))
K>0.6
is.true(K>0.6)
is(K>0.6)
is(K>0.6)
K[K>=0.6]
K[K>=0.6,]
K[K>=0.6|K<-0.6,]
K[K>=0.6|K<0.6,]
K[abs(K)>0.6,]
K
abs(K)
abs(K)>0.6
Model2<-lm(mpg~.,data=DataSet)
Model3<-step(Model2,direction="both")
summary(Model3)
anova(Model1,Model3)
T<-anova(Model1,Model3)
T
summary(T)
t.test(mpg~am,data=DataSet)
T<-t.test(mpg~am,data=DataSet)
T
str(T)
T$parameter
T$p.value
T$estimate
c(T$p.value,T$estimate)
K
c(Model1$coefficients,summary(Model1)$adj.r.squared)
T<-c(Model1$coefficients,summary(Model1)$adj.r.squared)
T
str(T)
abs(K>0.6)
abs(K)>0.6
K[[abs(K)>0.6]]
K[[abs(K)>0.6,]]
K[K>0.6]
K[abs(K)>0.6]
K[abs(K)>0.6,]
K[,abs(K)>0.6]
AN<-anova(Model1,Model3)
summary(AN)
AN$`Pr(>F)`
AN$`Pr(>F)`
AN$`Pr(>F)`
summary(AN)
AN
AN$Res.Df
rexp(40,0.2)
runif(40)
runif(40)
runif(40)
Lambda<-0.2
n<-1000
s<-40
mns = NULL
for (i in 1 : n) mns = c(mns, mean(rexp(s, lambda)))
for (i in 1 : n) mns = c(mns, mean(rexp(s, Lambda)))
mns
?runif
sim_result_mean<-mean(mns)
theo_mean<-1/Lambda
sim_result_mean
theo_mean
var(mns)
1/0.4
2.5/40
25/40
theo_mean
sq(theo_mean)
(theo_mean)^2/s
mean(mns)
var(mns)
(1/Lambda)^2/s
hist(mns,breaks=n,prob=T,col="orange",xlab = "means",main="Density of means",ylab="density")
xfit <- seq(min(means_exponentials), max(means_exponentials), length=100)
xfit <- seq(min(mns), max(mns), length=100)
xfit
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
yfit <- dnorm(xfit, mean=1/Lambda, sd=(1/Lambda/sqrt(s)))
yfit
?dnorm
help("ToothGrowth")
str(ToothGrowth)
DataSet<-ToothGrowth
summary(DataSet$len)
library(dplyr)
aggregate(len~supp,DataSet,mean)
aggregate(len~dose,DataSet,mean)
aggregate(len~dose+supp,DataSet,mean)
T<-t.test(len~supp,data=DataSet)
c(T$p.value,T$estimate)
T<-t.test(len~dose,data=DataSet)
T<-t.test(len~dose,data=DataSet[DataSet$dose==1|DataSet$dose==0.5])
T<-t.test(len~dose,data=DataSet[DataSet$dose==1|DataSet$dose==0.5,])
t.test(len~dose,data=DataSet[DataSet$dose==1|DataSet$dose==0.5,])
T<-t.test(len~dose,data=DataSet[DataSet$dose==1|DataSet$dose==0.5,])
T$estimate
T$estimate
T$estimate[1]
T$estimate[2]
t.test(len~supp,data=DataSet[DataSet$dose==0.5])
t.test(len~supp,data=DataSet[DataSet$dose==0.5,])
library(xtable)
install.packages("xtable")
library(xtable)
show_values<- data.frame("p-value"=c(t1$p.value, t2$p.value,t3$p.value),
"Group OJ Mean"=c(t1$estimate[1],t2$estimate[1],t3$estimate[1]),
"Group VC Mean"=c(t1$estimate[2],t2$estimate[2],t3$estimate[2]),
row.names=c("Dose 0.5","Dose 1","Dose 2"))
show_values<- data.frame("p-value"=c(t1$p.value, t2$p.value,t3$p.value),
"Group OJ Mean"=c(t1$estimate[1],t2$estimate[1],t3$estimate[1]),
"Group VC Mean"=c(t1$estimate[2],t2$estimate[2],t3$estimate[2]),
row.names=c("Dose 0.5","Dose 1","Dose 2"))
t1<-t.test(len~supp,data=DataSet[DataSet$dose==0.5,])
t2<-t.test(len~supp,data=DataSet[DataSet$dose==1,])
t3<-t.test(len~supp,data=DataSet[DataSet$dose==2,])
show_values<- data.frame("p-value"=c(t1$p.value, t2$p.value,t3$p.value),
"Group OJ Mean"=c(t1$estimate[1],t2$estimate[1],t3$estimate[1]),
"Group VC Mean"=c(t1$estimate[2],t2$estimate[2],t3$estimate[2]),
row.names=c("Dose 0.5","Dose 1","Dose 2"))
xtable(show_values)
T<-xtable(show_values)
T
print(T)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
0.8*1.6
0.8*08
0.8*0.8
0.36
0.64
mypdf
mypdf(0.8,1.6)
mypdf(0.8)
integrate(mypdf,0,1.6)
x^2/2
2
1
0.4
2
x^2/2
x^2/2
1.4
integrate(mypdf,0,1.6)
info()
1
2
3
4
1
0
0.2
integrate(mypdf,0,1.6)
integrate(mypdf,0,1.6)
integrate(mypdf,0,1.6)
2
1.5
1
4
x
2
1.5
info()
0.5
x
median(x)
0
1
2
1
12
3
4
5
3
x^2
x^2*.5
3
4
5
6
7
1
0.5
sqrt(2)
0.997*0.01
0.997*0.001
0.997*0.001*0.985
0.001*0.985
0.001*0.015
0.985*0.003
0.985*0.001
0.003*0.999
0.003*0.99
0.03*0.99
0.003/0.997*0.001/0,999
0.003/0.997*0.001/0.999
0.997/0.003*0.001/0.999
info()
skip()
skip()
23
23
23
4
5
6
7
89
1
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
head(adData)
head(diagnosis)
head(diagnosis)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
subsetNames<-training[,grep("IL",colnames(training))]
names(subsetNames)
T<-subsetNames[,-14]
names(T)
T<-subsetNames[,-13]
names(T)
preProcValues <- preProcess(T, method = c("center", "scale"))
head(preProcValues)
preProcValues <- preProcess(T, method = "pca")
head(preProcValues)
preProcValues
M<-abs(cor(T))
M
diag(M)<-0
which(M>0.8,arr,ind=T)
which(M>0.8,arr.ind=T)
which(M>0.8,arr.ind=T)
M
which(M > 0.8 , arr.ind=T )
M>0.8
preProcValues <- preProcess(log10(T+1), method = "pca")
names(training)
preProcValues <- preProcess(T, method = "pca",thresh=0.9)
preProcValues$rotation
preProcValues$numComp
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subsetNames<-training[,grep("IL"||"diagnosis",colnames(training))]
subsetNames<-training[,grep("IL||diagnosis",colnames(training))]
subsetNames<-training[,grep("IL||diagnosis",colnames(training))]
names(subsetNames)
subsetNames<-training[,grep("IL|diagnosis",colnames(training))]
names(subsetNames)
subsetNames<-subsetNames[,-14]
modelFit1<-train(subsetNames$diagnosis~,method="glm",data=subsetNames)
modelFit1<-train(subsetNames$diagnosis~.,method="glm",data=subsetNames)
modelFit2<-train(subsetNames$diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=subsetNames)
modelFit2<-train(subsetNames$diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=subsetNames, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelFit2<-train(subsetNames$diagnosis~.,method="glm",preProcess="pca",data=subsetNames, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
confusionMatrix(testing$diagnosis, predict(modelFit1, testing))
confusionMatrix(testing$diagnosis, predict(modelFit2, testing))
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='alexanderlou',
token='8C8B5F7D8A91696B836967B9F27402CD',
secret='<SECRET>')
shinyapps::setAccountInfo(name='alexanderlou',token='8C8B5F7D8A91696B836967B9F27402CD',secret='<SECRET>')
shinyapps::setAccountInfo(name='alexanderlou',
token='8C8B5F7D8A91696B836967B9F27402CD',
secret='YLHPIaAF8BnZx3OLqd9mGCwhcel4aG5jabvNELZk')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(knitr)
setwd("/Users/alexanderlou/datasciencecoursera/Practical Machine Learning/")
if (!file.exists("./pml-training.csv")) {
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile="./pml-training.csv", method = "libcurl")
}
if (!file.exists("./pml-testing.csv")) {
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile="./pml-testing.csv", method = "libcurl")
}
Training<- read.table("./pml-training.csv",sep=",",header = TRUE,na.strings=c("NA","#DIV/0!",""))
Testing<- read.table("./pml-testing.csv",sep=",",header = TRUE,na.strings=c("NA","#DIV/0!",""))
set.seed(820910)
Trainset<-createDataPartition(y=Training$X,p=0.6,list=FALSE)
TrainingSet<-Training[Trainset,]
TestingSet<-Training[-Trainset,]
mostlyNA <- sapply(TrainingSet, function(x) is.na(x)) > 0.95
view(mostlyNA)
View(mostlyNA)
library(caret);
library(kernlab);
data(spam)
inTrain<-createDataPartition(y=spam$type,p-0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam]-inTrain,]
library(caret);
library(kernlab);
data(spam)
inTrain<-createDataPartition(y=spam$type,p-0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
inTrain<-createDataPartition(y=spam$type,p-0.75,list=FALSE)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
M<-abs(cor(training[,-58]))
M
diag(M)
which(M>0.8,arr.ind=T)
M<-abs(cor(training[,-58]))
diag(M)<-0
which(M>0.8,arr.ind=T)
names(spam)
plot(spam[,num857],spam[,num415])
plot(spam[,32],spam[,34])
smallSpam<-spam[,c(34,32)]
prComp<-prcomp(smallSpam)
view(prComp)
view(prComp)
View(prComp)
list(prComp)
typeColor<-((spam$type=="spam")*1+1)
typeColor
spam[,-58]+1
library(AppliedPredictiveModeling)
ibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
T<-training[grep("IL", colnames(training)), ]
T
colnames(T)
T<-training[,grep("IL", names(training), value = TRUE) ]
names(T)
T<-T[,-14]
names(T)
T<-T[,-"TRAIL_R3"]
T<-T[,-T$TRAIL_R3]
T<-T[,-TRAIL_R3]
T<-T[,-13]
names(T)
P<-preProcess(T,method="pca",thresh=0.9)
names(P)
P
P$numComp
T1<-train(diagnosis~.,data=training,method="glm")
T2<-train(diagnosis~.,data=T1,preProcess=P,method="glm")
T2<-train(diagnosis~.,data=T1,trControl=P,method="glm")
T2<-train(diagnosis~.,data=T1,trControl=P,method="glm",trControl = trainControl(preProcOptions = list(thresh = 0.9))))
T2<-train(diagnosis~.,data=T1,trControl=P,method="glm",trControl = trainControl(preProcOptions = list(thresh = 0.9)))
T1<-train(diagnosis~.,data=training,method="glm")
T2<-train(diagnosis~.,data=T1,preProcess="PCA",method="glm",trControl = trainControl(preProcOptions = list(thresh = 0.9)))
names(T1)
names(T)
T2<-train(diagnosis~.,data=T,preProcess=P,method="glm")
T<-training[,grep("IL"|"diagnosis", names(training), value = TRUE) ]
T<-training[,grep(("IL"|"diagnosis"), names(training), value = TRUE) ]
T<-training[,grep("IL|diagnosis", names(training), value = TRUE) ]
names=(T)
names(T)
T<-T[,-14]
names(T)
T2<-train(diagnosis~.,data=T,preProcess=P,method="glm")
P<-preProcess(T,method="pca",thresh=0.9)
T2<-train(diagnosis~.,data=T,preProcess="PCA",method="glm",trControl=trainControl(preProcOptions = list(thresh = 0.95)))
T2<-train(diagnosis~.,data=T,preProcess="pca",method="glm",trControl=trainControl(preProcOptions = list(thresh = 0.95)))
M1<-predict(T1,testing)
M2<-predict(T2,testing)
confusionMatrix(M1,testing$diagnosis)
confusionMatrix(M2,testing$diagnosis)
T1<-train(diagnosis~.,data=training,method="glm")
M1<-predict(T1,testing)
confusionMatrix(M1,testing$diagnosis)
T1<-train(diagnosis~.,data=T,method="glm")
T2<-train(diagnosis~.,data=T,preProcess="pca",method="glm",trControl=trainControl(preProcOptions = list(thresh = 0.95)))
M1<-predict(T1,testing)
M2<-predict(T2,testing)
confusionMatrix(M1,testing$diagnosis)
confusionMatrix(M2,testing$diagnosis)
P<-preProcess(T,method="pca",thresh=0.9)
